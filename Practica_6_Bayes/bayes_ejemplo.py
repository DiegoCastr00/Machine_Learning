# -*- coding: utf-8 -*-
"""bayes_ejemplo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17bjDLrXxAWUwkh2ZunMOg9rwAU8D2EeO
"""

from functools import reduce

import pandas as pd
import pprint

class Classifier():
    data = None
    class_attr = None
    priori = {}
    cp = {}
    hipotesis = None


    def __init__(self,filename=None, class_attr=None ):
        self.data = pd.read_csv(filename, sep=',', header =(0))
        self.class_attr = class_attr

    '''
        probabilidad(clase) =   frecuencia de aparcicin or columna/ conteo clase
    '''
    def calcular_priori(self):
        class_values = list(set(self.data[self.class_attr]))
        class_data =  list(self.data[self.class_attr])
        for i in class_values:
            self.priori[i]  = class_data.count(i)/float(len(class_data))
        print ("Valores a priori : ", self.priori)

    '''
        Calculo de las probabilidades individuales
        P(outcome|evidencia) =   P(verosimilitud de la evidencia) x Prior prob de outcome/P(Evidencia)

    '''
    def get_cp(self, attr, attr_type, class_value):
        data_attr = list(self.data[attr])
        class_data = list(self.data[self.class_attr])
        total =1
        for i in range(0, len(data_attr)):
            if class_data[i] == class_value and data_attr[i] == attr_type:
                total+=1
        return total/float(class_data.count(class_value))

    '''
        AquÃ­ se calcula la Probabilidad de Evidencia y se multiplica todas las probabilidades individuales a priori
        (Outcome|Multiple Evidence) = P(Evidence1|Outcome) x P(Evidence2|outcome) x ... x P(EvidenceN|outcome) x P(Outcome)
        escalado por P(Multiple Evidence)
    '''
    def calcular_probabilidad_condicional(self, hipotesis):
        for i in self.priori:
            self.cp[i] = {}
            for j in hipotesis:
                self.cp[i].update({ hipotesis[j]: self.get_cp(j, hipotesis[j], i)})
        print ("\nProbabilidades condicionales calculadas: \n")
        pprint.pprint(self.cp)

    def clasificar(self):
        print ("Resultado: ")
        for i in self.cp:
            print (i, " ==> ", reduce(lambda x, y: x*y, self.cp[i].values())*self.priori[i])

if __name__ == "__main__":
    c = Classifier(filename="/content/sample_data/new_dataset.csv", class_attr="Play" )
    c.calcular_priori()
    c.hipotesis = {"Outlook":'Rainy', "Temp":"Mild", "Humidity":'Normal' , "Windy":'t'}

    c.calcular_probabilidad_condicional(c.hipotesis)
    c.clasificar()